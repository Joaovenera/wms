# Production Docker Compose Configuration
version: '3.8'

services:
  # PostgreSQL 17 Database - Production Configuration
  postgres:
    image: postgres:17-alpine
    container_name: wms-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-warehouse}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # PostgreSQL 17 performance optimizations for production
      POSTGRES_INITDB_ARGS: "--data-checksums --encoding=UTF8 --locale=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./postgresql.production.conf:/etc/postgresql/postgresql.conf
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-warehouse}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - wms-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache - Production Configuration
  redis:
    image: redis:7-alpine
    container_name: wms-redis-prod
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis.production.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - wms-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API - Production Configuration
  backend:
    image: ${BACKEND_IMAGE:-ghcr.io/your-org/wms/backend:latest}
    container_name: wms-backend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-warehouse}
      REDIS_URL: redis://redis:6379
      SESSION_SECRET: ${SESSION_SECRET}
      FRONTEND_URL: ${FRONTEND_URL:-https://wms.yourdomain.com}
      COOKIE_DOMAIN: ${COOKIE_DOMAIN:-yourdomain.com}
      USE_HTTPS: ${USE_HTTPS:-true}
      SECURE_COOKIES: ${SECURE_COOKIES:-true}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENABLE_CONSOLE_LOGGING: ${ENABLE_CONSOLE_LOGGING:-false}
      ENABLE_FILE_LOGGING: ${ENABLE_FILE_LOGGING:-true}
      LOG_DIRECTORY: /app/logs
      # Composition system configuration
      COMPOSITION_CACHE_TTL: ${COMPOSITION_CACHE_TTL:-3600}
      COMPOSITION_MAX_DEPTH: ${COMPOSITION_MAX_DEPTH:-10}
      COMPOSITION_BATCH_SIZE: ${COMPOSITION_BATCH_SIZE:-100}
      # Performance monitoring
      PERFORMANCE_MONITORING: ${PERFORMANCE_MONITORING:-true}
      METRICS_ENDPOINT: ${METRICS_ENDPOINT:-/metrics}
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
      - backend_temp:/app/temp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - wms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend Application - Production Configuration
  frontend:
    image: ${FRONTEND_IMAGE:-ghcr.io/your-org/wms/frontend:latest}
    container_name: wms-frontend-prod
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-8080}:8080"
    depends_on:
      - backend
    networks:
      - wms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health.html"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.2'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy (Optional - for SSL termination)
  nginx:
    image: nginx:alpine
    container_name: wms-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - wms-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring and Logging (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: wms-prometheus-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - wms-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: wms-grafana-prod
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - wms-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local
  backend_temp:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  wms-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16