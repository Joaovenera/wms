name: Backend Testing

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - '.github/workflows/test.yml'

env:
  NODE_VERSION: '20'
  POSTGRES_VERSION: '17'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: wms_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        test-type: [unit, integration, coverage]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Setup test environment
        working-directory: ./backend
        run: |
          cp .env.test.example .env.test
          npm run test:setup
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_test
          REDIS_URL: redis://localhost:6379/1

      - name: Run type checking
        working-directory: ./backend
        run: npm run check

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        working-directory: ./backend
        run: npm run test:unit
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_test
          REDIS_URL: redis://localhost:6379/1

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        working-directory: ./backend
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_test
          REDIS_URL: redis://localhost:6379/1

      - name: Run coverage tests
        if: matrix.test-type == 'coverage'
        working-directory: ./backend
        run: npm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_test
          REDIS_URL: redis://localhost:6379/1

      - name: Upload coverage reports
        if: matrix.test-type == 'coverage'
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            backend/test-results/
            backend/coverage/
          retention-days: 7

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Build application
        working-directory: ./backend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: backend/dist/
          retention-days: 7

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run security audit
        working-directory: ./backend
        run: npm audit --audit-level=moderate

      - name: Run dependency check
        working-directory: ./backend
        run: npx better-npm-audit audit --level moderate