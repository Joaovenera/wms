services:
  # PostgreSQL 17 Database - Optimized for Development
  postgres:
    image: postgres:17-alpine
    container_name: wms-postgres
    environment:
      POSTGRES_DB: warehouse
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      # PostgreSQL 17 performance optimizations
      POSTGRES_INITDB_ARGS: "--data-checksums --encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./backend/postgresql.conf:/etc/postgresql/postgresql.conf
    command: >
      postgres
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c max_parallel_workers_per_gather=2
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=2
      -c wal_compression=on
      -c wal_level=replica
      -c max_wal_size=1GB
      -c min_wal_size=80MB
      -c checkpoint_timeout=5min
      -c log_min_duration_statement=1000
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
      -c max_connections=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d warehouse"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - wms-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: wms-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - wms-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: wms-backend
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/warehouse
      REDIS_URL: redis://redis:6379
      SESSION_SECRET: bbj0RdMK3cHRVM/BSM1kZQwzVk1yswZA/VUfuO9iTB/aNyCqhqyyhLEYDbfx33bHfjHC3zcUH0JaOpzL8OEMgA==
      FRONTEND_URL: http://localhost:5173
      COOKIE_DOMAIN: localhost
      USE_HTTPS: false
      SECURE_COOKIES: false
      LOG_LEVEL: debug
      ENABLE_CONSOLE_LOGGING: true
      ENABLE_FILE_LOGGING: true
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - wms-network
    develop:
      watch:
        - action: sync
          path: ./backend/src
          target: /app/src
        - action: rebuild
          path: ./backend/package.json

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: wms-frontend
    environment:
      VITE_API_URL: http://localhost:3000
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - wms-network
    develop:
      watch:
        - action: sync
          path: ./frontend/src
          target: /app/src
        - action: rebuild
          path: ./frontend/package.json

volumes:
  postgres_data:
  redis_data:
  backend_logs:

networks:
  wms-network:
    driver: bridge 